// <auto-generated />
using System;
using HabitService.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HabitService.Data.Migrations
{
    [DbContext(typeof(HabitDbContext))]
    partial class HabitDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HabitService.Business.Models.Habit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("PeriodInDays")
                        .HasColumnType("integer")
                        .HasColumnName("period_in_days");

                    b.Property<int>("TargetValue")
                        .HasColumnType("integer")
                        .HasColumnName("target_value");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_habits_created_by");

                    b.ToTable("habits", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 10, 4, 16, 18, 35, 586, DateTimeKind.Utc).AddTicks(5675),
                            Description = "Поддержание водного баланса организма",
                            Name = "Пить 2 литра воды в день",
                            PeriodInDays = 1,
                            TargetValue = 2
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 10, 4, 16, 18, 35, 586, DateTimeKind.Utc).AddTicks(5680),
                            Description = "Ежедневное чтение для саморазвития",
                            Name = "Читать 30 минут",
                            PeriodInDays = 1,
                            TargetValue = 30
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 10, 4, 16, 18, 35, 586, DateTimeKind.Utc).AddTicks(5682),
                            Description = "Регулярные физические нагрузки",
                            Name = "Заниматься спортом 3 раза в неделю",
                            PeriodInDays = 7,
                            TargetValue = 3
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 10, 4, 16, 18, 35, 586, DateTimeKind.Utc).AddTicks(5684),
                            Description = "Ежедневная практика mindfulness",
                            Name = "Медитировать 10 минут",
                            PeriodInDays = 1,
                            TargetValue = 10
                        });
                });

            modelBuilder.Entity("HabitService.Business.Models.UserHabit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("CurrentValue")
                        .HasColumnType("integer")
                        .HasColumnName("current_value");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("HabitId")
                        .HasColumnType("uuid")
                        .HasColumnName("habit_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("HabitId")
                        .HasDatabaseName("ix_user_habits_habit_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_user_habits_is_active");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_habits_user_id");

                    b.HasIndex("UserId", "HabitId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_habits_user_id_habit_id_unique");

                    b.ToTable("user_habits", (string)null);
                });

            modelBuilder.Entity("HabitService.Business.Models.UserHabit", b =>
                {
                    b.HasOne("HabitService.Business.Models.Habit", "Habit")
                        .WithMany()
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habit");
                });
#pragma warning restore 612, 618
        }
    }
}

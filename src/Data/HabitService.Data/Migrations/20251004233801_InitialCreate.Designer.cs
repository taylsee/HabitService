// <auto-generated />
using System;
using HabitService.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HabitService.Data.Migrations
{
    [DbContext(typeof(HabitDbContext))]
    [Migration("20251004233801_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HabitService.Business.Models.Habit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("PeriodInDays")
                        .HasColumnType("integer")
                        .HasColumnName("period_in_days");

                    b.Property<int>("TargetValue")
                        .HasColumnType("integer")
                        .HasColumnName("target_value");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_habits_created_by");

                    b.ToTable("habits", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6402),
                            Description = "Поддержание водного баланса организма",
                            Name = "Пить 2 литра воды в день",
                            PeriodInDays = 1,
                            TargetValue = 8
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6404),
                            Description = "Ежедневная физическая активность для бодрости",
                            Name = "Утренняя зарядка 15 минут",
                            PeriodInDays = 1,
                            TargetValue = 1
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6407),
                            Description = "Регулярные интенсивные тренировки",
                            Name = "Спорт 3 раза в неделю",
                            PeriodInDays = 7,
                            TargetValue = 3
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6409),
                            Description = "Поддержание гигиены полости рта",
                            Name = "Чистить зубы 2 раза в день",
                            PeriodInDays = 1,
                            TargetValue = 2
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6410),
                            Description = "Ежедневное чтение для саморазвития",
                            Name = "Читать 30 минут в день",
                            PeriodInDays = 1,
                            TargetValue = 1
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6437),
                            Description = "Регулярное изучение иностранного языка",
                            Name = "Изучать английский 20 минут",
                            PeriodInDays = 1,
                            TargetValue = 1
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6439),
                            Description = "Развитие через аудиоконтент",
                            Name = "Слушать образовательный подкаст",
                            PeriodInDays = 7,
                            TargetValue = 2
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6441),
                            Description = "Ежедневная практика mindfulness",
                            Name = "Медитировать 10 минут",
                            PeriodInDays = 1,
                            TargetValue = 1
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6442),
                            Description = "Ежедневные прогулки для снятия стресса",
                            Name = "Прогулка на свежем воздухе",
                            PeriodInDays = 1,
                            TargetValue = 1
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6445),
                            Description = "Составление плана на следующий день",
                            Name = "Планировать день с вечера",
                            PeriodInDays = 1,
                            TargetValue = 1
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6446),
                            Description = "Организация входящих сообщений",
                            Name = "Разбор почты 2 раза в день",
                            PeriodInDays = 1,
                            TargetValue = 2
                        },
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-123456789012"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6448),
                            Description = "Ежедневное отслеживание трат",
                            Name = "Учет расходов",
                            PeriodInDays = 1,
                            TargetValue = 1
                        },
                        new
                        {
                            Id = new Guid("23456789-2345-2345-2345-234567890123"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6449),
                            Description = "Регулярные накопления",
                            Name = "Откладывать 10% от дохода",
                            PeriodInDays = 30,
                            TargetValue = 1
                        },
                        new
                        {
                            Id = new Guid("45678901-4567-4567-4567-456789012345"),
                            CreatedAt = new DateTime(2025, 10, 4, 23, 38, 0, 990, DateTimeKind.Utc).AddTicks(6452),
                            Description = "Социальная активность",
                            Name = "Встреча с друзьями",
                            PeriodInDays = 7,
                            TargetValue = 1
                        });
                });

            modelBuilder.Entity("HabitService.Business.Models.HabitCompletion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("UserHabitId")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("UserHabitId");

                    b.ToTable("HabitCompletions");
                });

            modelBuilder.Entity("HabitService.Business.Models.UserHabit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("HabitId")
                        .HasColumnType("uuid")
                        .HasColumnName("habit_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("HabitId")
                        .HasDatabaseName("ix_user_habits_habit_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_user_habits_is_active");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_habits_user_id");

                    b.HasIndex("UserId", "HabitId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_habits_user_id_habit_id_unique");

                    b.ToTable("user_habits", (string)null);
                });

            modelBuilder.Entity("HabitService.Business.Models.HabitCompletion", b =>
                {
                    b.HasOne("HabitService.Business.Models.UserHabit", "UserHabit")
                        .WithMany("Completions")
                        .HasForeignKey("UserHabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserHabit");
                });

            modelBuilder.Entity("HabitService.Business.Models.UserHabit", b =>
                {
                    b.HasOne("HabitService.Business.Models.Habit", "Habit")
                        .WithMany()
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habit");
                });

            modelBuilder.Entity("HabitService.Business.Models.UserHabit", b =>
                {
                    b.Navigation("Completions");
                });
#pragma warning restore 612, 618
        }
    }
}
